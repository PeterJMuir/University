--1.a
SELECT IndustryTitle
FROM INDUSTRY I,(SELECT IndustryID, count(IndustryID) AS Cnt_Ind
FROM JOB J
GROUP BY IndustryID) R
WHERE R.Cnt_Ind = (SELECT MAX(R.Cnt_Ind) FROM (SELECT count(IndustryID) AS Cnt_Ind
FROM JOB J
GROUP BY IndustryID) R) AND I.IndustryID = R.IndustryID;

--1.B
SELECT *
FROM JOB J, CONTRACT_JOB CJ
WHERE J.JobID = CJ.JobID AND (CJ.EndDate - CJ.StartDate) = 
(SELECT MAX(DateDifference)
FROM (
	SELECT (EndDate - StartDate) AS DateDifference
	FROM CONTRACT_JOB CJ
	WHERE EndDate IS NOT NULL AND StartDate IS NOT NULL
	));
	
--1.C
SELECT DISTINCT *
FROM BUSINESS A, (SELECT B.ABNNUMBER, B.BUSINESSPOSTCODE
				FROM BUSINESS B, (SELECT POSTCODE, ADJACENTPOSTCODE
								FROM ADJACENT_SUBURB
								WHERE POSTCODE = (
												SELECT POSTCODE
												FROM JOB
												WHERE JobID = '11')
								) R
				WHERE B.BUSINESSPOSTCODE = R.POSTCODE OR B.BUSINESSPOSTCODE = R.ADJACENTPOSTCODE) X, BUSINESS_INDUSTRY BI
WHERE A.ABNNUMBER = X.ABNNUMBER AND A.ABNNUMBER = BI.ABNNUMBER AND BI.INDUSTRYID = (SELECT INDUSTRYID FROM JOB WHERE JobID = '11');


--1.d	

SELECT DISTINCT CLIENTNO
FROM EQUIPMENT_HIRE
WHERE MONTHS_BETWEEN(sysdate, pickupdate) > 2 AND CLIENTNO NOT IN (SELECT DISTINCT CLIENTNO FROM EQUIPMENT_hire WHERE MONTHS_BETWEEN(sysdate, pickupdate) <= 2)
ORDER BY TO_NUMBER(CLIENTNO);

--1.E


SELECT R.BusinessName AS "Highest rated business", R.REVIEWRATING AS "Highest rating out of 5", Q.BusinessName AS "Lowest rated business", Q.REVIEWRATING AS "Lowest rating out of 5"
FROM
	(SELECT B1.BusinessName, X1.REVIEWRATING
	FROM BUSINESS B1, (
		SELECT SELECTEDBUSINESSABNNUMBER, REVIEWRATING
		FROM JOB J, (SELECT JOBID, REVIEWRATING
					FROM REVIEW
					WHERE REVIEWRATING = (SELECT MAX(REVIEWRATING) AS MAXRATING
										FROM REVIEW)) MA
		WHERE J.JOBID = MA.JOBID
		) X1
	WHERE B1.ABNNUMBER = X1.SELECTEDBUSINESSABNNUMBER
	) R,
	(SELECT B2.BusinessName, X2.REVIEWRATING
	FROM BUSINESS B2, (
		SELECT SELECTEDBUSINESSABNNUMBER, REVIEWRATING
		FROM JOB J, (SELECT JOBID, REVIEWRATING
					FROM REVIEW
					WHERE REVIEWRATING = (SELECT MIN(REVIEWRATING) AS MINRATING
										FROM REVIEW)) MA
		WHERE J.JOBID = MA.JOBID
		) X2
	WHERE B2.ABNNUMBER = X2.SELECTEDBUSINESSABNNUMBER
	) Q;

--1.F

SELECT C.CLIENTNO, C.CLIENTNAME, (NVL(INDCLAMOUNT,0) + NVL(CORCLAMOUNT,0)) AS "Total Job Expense", TOTALEQUIP AS "Total Equipment Hiring Expense"
FROM CLIENT C,
(SELECT SUM(I.AMOUNT) AS INDCLAMOUNT, CAJ.INDIVIDUALCLIENTNO
FROM INVOICE I, CASUAL_JOB CAJ
WHERE I.JOBID = CAJ.JOBID
GROUP BY CAJ.INDIVIDUALCLIENTNO) CAJOB,
(SELECT SUM(I.AMOUNT) AS CORCLAMOUNT, COJ.CORPORATECLIENTNO
FROM INVOICE I, CONTRACT_JOB COJ
WHERE I.JOBID = COJ.JOBID
GROUP BY COJ.CORPORATECLIENTNO) COJOB,
(SELECT ClientNo, SUM(150 * (DropOffDate - PickUpDate)) AS TOTALEQUIP
FROM EQUIPMENT_HIRE
WHERE DropOffDate IS NOT NULL
GROUP BY CLIENTNO) EQCOST
WHERE C.CLIENTNO = CAJOB.INDIVIDUALCLIENTNO(+)
AND C.CLIENTNO = COJOB.CORPORATECLIENTNO(+)
AND C.CLIENTNO = EQCOST.CLIENTNO(+)
ORDER BY TO_NUMBER(C.CLIENTNO);

--1.G

SELECT Distinct E.EQUIPMENTID, E.EquipmentName
FROM EQUIPMENT E
WHERE EQUIPMENTID IN (SELECT EQUIPMENTID FROM
					 (SELECT EQUIPMENTID, COUNT(EQUIPMENTID) AS TIMES_HIRED
					 FROM EQUIPMENT_HIRE
					 GROUP BY EQUIPMENTID) T1
					 WHERE 2 >= (SELECT COUNT(*) FROM (SELECT EQUIPMENTID, COUNT(EQUIPMENTID) AS TIMES_HIRED
					 FROM EQUIPMENT_HIRE
					 GROUP BY EQUIPMENTID) T2
					 WHERE T1.TIMES_HIRED <= T2.TIMES_HIRED)
					);

--1.h
select *
from business B, freelancer_business fb
where fb.EliteMemberID is null and b.abnnumber = fb.abnnumber;

--1.i
SELECT B.ABNNUMBER, B.BUSINESSNAME
FROM BUSINESS B, (SELECT ABNNUMBER
				FROM QUOTATION Q
				WHERE Q.QuoteStatus = 'Posted') R
WHERE B.ABNNUMBER = R.ABNNUMBER;

--1.J
SELECT SeminarTitle, SeminarDateTime, cnt_pm_participants AS "Afternoon Participants"
FROM Seminar S, (
SELECT X1.SeminarID, count(SA.EliteMemberID) AS cnt_pm_participants
FROM Seminar_Attendies SA, (SELECT SeminarID
							FROM SEMINAR
							WHERE TO_CHAR(SeminarDateTime, 'hh24:mi:ss') > '12:00:00') X1
WHERE SA.SeminarID = X1.SeminarID
GROUP BY X1.SeminarID) X2
WHERE S.SeminarID = X2.SeminarID;

--2.a
CREATE OR REPLACE PROCEDURE PRO1(
P_INDUSTRYID IN INDUSTRY.INDUSTRYID%TYPE) AS
V_UNIONTITLE TRADE_UNION.UNIONTITLE%TYPE;
CURSOR C_BUSINESSIDS IS
SELECT B.ABNNUMBER, B.BUSINESSNAME
FROM BUSINESS_INDUSTRY BI, BUSINESS B
WHERE BI.INDUSTRYID = P_INDUSTRYID AND BI.ABNNUMBER = B.ABNNUMBER;
BEGIN
SELECT UNIONTITLE
INTO V_UNIONTITLE
FROM TRADE_UNION TU
WHERE UNIONID = (SELECT UNIONID FROM INDUSTRY WHERE INDUSTRYID = P_INDUSTRYID); 
DBMS_OUTPUT.PUT_LINE(V_UNIONTITLE);
FOR CNT IN C_BUSINESSIDS LOOP
DBMS_OUTPUT.put_LINE(CNT.ABNNUMBER || '  ' || CNT.BUSINESSNAME);
END LOOP;
END PRO1;
/

EXECUTE PRO1('1');

--2.B
CREATE OR REPLACE FUNCTION OverdueFine(
P_CLIENTNO IN CLIENT.CLIENTNO%TYPE) RETURN NUMBER IS
V_DAYS_RENTED NUMBER;
V_DAYS_OVERDUE NUMBER;
BEGIN
SELECT (SYSDATE - PICKUPDATE)
INTO V_DAYS_RENTED
FROM EQUIPMENT_HIRE
WHERE CLIENTNO = P_CLIENTNO AND DROPOFFDATE IS NULL;
SELECT (V_DAYS_RENTED - MAXRENTDURATIONDAYS)
INTO V_DAYS_OVERDUE
FROM EQUIPMENT_HIRE EH, EQUIPMENT E
WHERE EH.CLIENTNO = P_CLIENTNO AND EH.DROPOFFDATE IS NULL AND EH.EQUIPMENTID = E.EQUIPMENTID;
IF(V_DAYS_OVERDUE < 0) THEN
V_DAYS_OVERDUE := 0;
END IF;
RETURN (20*V_DAYS_OVERDUE);
END OverdueFine;
/

SELECT ClientNo, OverdueFine(ClientNo) AS "OVERDUE FINES"
FROM CLIENT;

--2.C
CREATE OR REPLACE PROCEDURE TOTALOWED(
P_CLIENTNO IN CLIENT.CLIENTNO%TYPE) AS
V_RENT_COST NUMBER;
V_OVERDUE NUMBER;
BEGIN
SELECT SUM(150 * (DropOffDate - PickUpDate))
INTO V_RENT_COST
FROM EQUIPMENT_HIRE
WHERE DropOffDate IS NOT NULL AND CLIENTNO = P_CLIENTNO
GROUP BY CLIENTNO;
IF(V_RENT_COST < 0) THEN
V_RENT_COST := 0;
END IF;
SELECT (NVL(OverdueFine(CLIENTNO),0))
INTO V_OVERDUE
FROM CLIENT
WHERE CLIENTNO = P_CLIENTNO;
DBMS_OUTPUT.PUT_LINE('EQUIPMENT COST: ' || V_RENT_COST);
DBMS_OUTPUT.PUT_LINE('OVERDUE FINE: ' || V_OVERDUE);
END TOTALOWED;
/

EXECUTE TOTALOWED('5');

--3.a
CREATE OR REPLACE TRIGGER chk_Review
BEFORE INSERT ON REVIEW
FOR EACH ROW
DECLARE v_1 VARCHAR2(11);
BEGIN
IF(:new.JobID IS NOT NULL) THEN
	SELECT SelectedBusinessABNNumber
	INTO v_1
	FROM JOB J
	WHERE :new.JobID = J.JobID;
	IF(v_1 IS NULL) THEN
	RAISE_APPLICATION_ERROR(-20002, 'Job does not have a business selected yet and cannot be reviewed');
	END IF;
ELSE
	RAISE_APPLICATION_ERROR(-20001, 'Can''t put in a review without a JobID');
END IF;	
END chk_Review;
/

INSERT INTO REVIEW(ReviewID,ReviewDate,ReviewRating,ReviewText)
VALUES(20,SYSDATE,5,'Good Job');

INSERT INTO REVIEW
VALUES(20,SYSDATE,5,'Good Job',20);

--3.b
DROP TABLE DELETEDJOBS;
CREATE TABLE DeletedJobs
(JobID VARCHAR2(10),
IndustryTitle VARCHAR2(10),
Postcode NUMBER(4),
DeletionDate DATE,
DNumber INTEGER,
PRIMARY KEY(DNumber)
);
DROP SEQUENCE seq_1;
CREATE SEQUENCE seq_1
START WITH 1
INCREMENT BY 1;


CREATE OR REPLACE TRIGGER Backup_jobs
BEFORE DELETE ON JOB
FOR EACH ROW
declare
v_industrytitle INDUSTRY.INDUSTRYTITLE%TYPE;
BEGIN
select INDUSTRYTITLE
INTO V_INDUSTRYTITLE
FROM INDUSTRY
WHERE INDUSTRYID = :OLD.INDUSTRYID;
INSERT INTO DeletedJobs
VALUES(:old.JobID, V_INDUSTRYTITLE, :OLD.POSTCODE,SYSDATE,seq_1.nextval);
DELETE FROM CASUAL_JOB
WHERE JOBID = :OLD.JOBID;
DELETE FROM CONTRACT_JOB
WHERE JOBID = :OLD.JOBID;
DELETE FROM QUOTATION
WHERE JOBID = :OLD.JOBID;
END Backup_jobs;
/

DELETE FROM JOB
WHERE JOBID = '11';
